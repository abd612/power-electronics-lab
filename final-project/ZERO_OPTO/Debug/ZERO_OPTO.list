
D:\Documents\Workspaces\TrueStudio Workspace\ZERO_OPTO\Debug\ZERO_OPTO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ff4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001188  08001188  00011188  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001198  08001198  00011198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800119c  0800119c  0001119c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  080011a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000005c  20000008  080011a8  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000064  080011a8  00020064  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e77f  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001ccc  00000000  00000000  0002e7b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000471c  00000000  00000000  00030483  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000688  00000000  00000000  00034ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000948  00000000  00000000  00035228  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000382e  00000000  00000000  00035b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002d87  00000000  00000000  0003939e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003c125  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000127c  00000000  00000000  0003c1a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001170 	.word	0x08001170

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	08001170 	.word	0x08001170

080001d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001d4:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001d6:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <HAL_InitTick+0x24>)
{
 80001d8:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001da:	6818      	ldr	r0, [r3, #0]
 80001dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e4:	f000 f894 	bl	8000310 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001e8:	2200      	movs	r2, #0
 80001ea:	4621      	mov	r1, r4
 80001ec:	f04f 30ff 	mov.w	r0, #4294967295
 80001f0:	f000 f84e 	bl	8000290 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80001f4:	2000      	movs	r0, #0
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000004 	.word	0x20000004

080001fc <HAL_Init>:
{
 80001fc:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001fe:	4b0b      	ldr	r3, [pc, #44]	; (800022c <HAL_Init+0x30>)
 8000200:	681a      	ldr	r2, [r3, #0]
 8000202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000206:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000208:	681a      	ldr	r2, [r3, #0]
 800020a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800020e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000210:	681a      	ldr	r2, [r3, #0]
 8000212:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000216:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000218:	2003      	movs	r0, #3
 800021a:	f000 f827 	bl	800026c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800021e:	2000      	movs	r0, #0
 8000220:	f7ff ffd8 	bl	80001d4 <HAL_InitTick>
  HAL_MspInit();
 8000224:	f000 fe8c 	bl	8000f40 <HAL_MspInit>
}
 8000228:	2000      	movs	r0, #0
 800022a:	bd08      	pop	{r3, pc}
 800022c:	40023c00 	.word	0x40023c00

08000230 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000230:	4a02      	ldr	r2, [pc, #8]	; (800023c <HAL_IncTick+0xc>)
 8000232:	6813      	ldr	r3, [r2, #0]
 8000234:	3301      	adds	r3, #1
 8000236:	6013      	str	r3, [r2, #0]
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	20000024 	.word	0x20000024

08000240 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000240:	4b01      	ldr	r3, [pc, #4]	; (8000248 <HAL_GetTick+0x8>)
 8000242:	6818      	ldr	r0, [r3, #0]
}
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	20000024 	.word	0x20000024

0800024c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800024c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800024e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000250:	f7ff fff6 	bl	8000240 <HAL_GetTick>
  uint32_t wait = Delay;
 8000254:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000256:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000258:	4605      	mov	r5, r0
  {
     wait++;
 800025a:	bf18      	it	ne
 800025c:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800025e:	f7ff ffef 	bl	8000240 <HAL_GetTick>
 8000262:	1b40      	subs	r0, r0, r5
 8000264:	42a0      	cmp	r0, r4
 8000266:	d3fa      	bcc.n	800025e <HAL_Delay+0x12>
  {
  }
}
 8000268:	b003      	add	sp, #12
 800026a:	bd30      	pop	{r4, r5, pc}

0800026c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800026c:	4a07      	ldr	r2, [pc, #28]	; (800028c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800026e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000270:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000274:	041b      	lsls	r3, r3, #16
 8000276:	0c1b      	lsrs	r3, r3, #16
 8000278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800027c:	0200      	lsls	r0, r0, #8
 800027e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000282:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000286:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000288:	60d3      	str	r3, [r2, #12]
 800028a:	4770      	bx	lr
 800028c:	e000ed00 	.word	0xe000ed00

08000290 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000290:	4b17      	ldr	r3, [pc, #92]	; (80002f0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000292:	b530      	push	{r4, r5, lr}
 8000294:	68dc      	ldr	r4, [r3, #12]
 8000296:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800029a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800029e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002a0:	2b04      	cmp	r3, #4
 80002a2:	bf28      	it	cs
 80002a4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002a6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a8:	f04f 0501 	mov.w	r5, #1
 80002ac:	fa05 f303 	lsl.w	r3, r5, r3
 80002b0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002b4:	bf8c      	ite	hi
 80002b6:	3c03      	subhi	r4, #3
 80002b8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002ba:	4019      	ands	r1, r3
 80002bc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002be:	fa05 f404 	lsl.w	r4, r5, r4
 80002c2:	3c01      	subs	r4, #1
 80002c4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80002c6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002c8:	ea42 0201 	orr.w	r2, r2, r1
 80002cc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	bfaf      	iteee	ge
 80002d2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	f000 000f 	andlt.w	r0, r0, #15
 80002da:	4b06      	ldrlt	r3, [pc, #24]	; (80002f4 <HAL_NVIC_SetPriority+0x64>)
 80002dc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002de:	bfa5      	ittet	ge
 80002e0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002e4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002ec:	bd30      	pop	{r4, r5, pc}
 80002ee:	bf00      	nop
 80002f0:	e000ed00 	.word	0xe000ed00
 80002f4:	e000ed14 	.word	0xe000ed14

080002f8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002f8:	0942      	lsrs	r2, r0, #5
 80002fa:	2301      	movs	r3, #1
 80002fc:	f000 001f 	and.w	r0, r0, #31
 8000300:	fa03 f000 	lsl.w	r0, r3, r0
 8000304:	4b01      	ldr	r3, [pc, #4]	; (800030c <HAL_NVIC_EnableIRQ+0x14>)
 8000306:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800030a:	4770      	bx	lr
 800030c:	e000e100 	.word	0xe000e100

08000310 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000310:	3801      	subs	r0, #1
 8000312:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000316:	d20a      	bcs.n	800032e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	4a07      	ldr	r2, [pc, #28]	; (8000338 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800031c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031e:	21f0      	movs	r1, #240	; 0xf0
 8000320:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000324:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000326:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000328:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800032a:	601a      	str	r2, [r3, #0]
 800032c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800032e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	e000e010 	.word	0xe000e010
 8000338:	e000ed00 	.word	0xe000ed00

0800033c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800033c:	4b04      	ldr	r3, [pc, #16]	; (8000350 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800033e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000340:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000342:	bf0c      	ite	eq
 8000344:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000348:	f022 0204 	bicne.w	r2, r2, #4
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	4770      	bx	lr
 8000350:	e000e010 	.word	0xe000e010

08000354 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000354:	4770      	bx	lr

08000356 <HAL_SYSTICK_IRQHandler>:
{
 8000356:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000358:	f7ff fffc 	bl	8000354 <HAL_SYSTICK_Callback>
 800035c:	bd08      	pop	{r3, pc}
	...

08000360 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000364:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000366:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000368:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8000508 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800036c:	4a64      	ldr	r2, [pc, #400]	; (8000500 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800036e:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000370:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000374:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000376:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000378:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800037c:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8000380:	42b7      	cmp	r7, r6
 8000382:	f040 80ad 	bne.w	80004e0 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000386:	684c      	ldr	r4, [r1, #4]
 8000388:	f024 0a10 	bic.w	sl, r4, #16
 800038c:	f1ba 0f02 	cmp.w	sl, #2
 8000390:	d116      	bne.n	80003c0 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 8000392:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000396:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800039a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800039e:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80003a2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80003a6:	f04f 0e0f 	mov.w	lr, #15
 80003aa:	fa0e fe0b 	lsl.w	lr, lr, fp
 80003ae:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80003b2:	690d      	ldr	r5, [r1, #16]
 80003b4:	fa05 f50b 	lsl.w	r5, r5, fp
 80003b8:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 80003bc:	f8cc 5020 	str.w	r5, [ip, #32]
 80003c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003c4:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80003c6:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003ca:	fa05 f50c 	lsl.w	r5, r5, ip
 80003ce:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003d0:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003d4:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003d8:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003dc:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003e0:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003e4:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003e8:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 80003ea:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003ee:	d815      	bhi.n	800041c <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 80003f0:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003f4:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003f8:	68cd      	ldr	r5, [r1, #12]
 80003fa:	fa05 fa0c 	lsl.w	sl, r5, ip
 80003fe:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 8000402:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8000406:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800040a:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800040e:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8000412:	fa0e fe03 	lsl.w	lr, lr, r3
 8000416:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 800041a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800041c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800041e:	9d00      	ldr	r5, [sp, #0]
 8000420:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000422:	688f      	ldr	r7, [r1, #8]
 8000424:	fa07 f70c 	lsl.w	r7, r7, ip
 8000428:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800042a:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800042c:	00e5      	lsls	r5, r4, #3
 800042e:	d557      	bpl.n	80004e0 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000430:	f04f 0b00 	mov.w	fp, #0
 8000434:	f8cd b00c 	str.w	fp, [sp, #12]
 8000438:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800043c:	4d31      	ldr	r5, [pc, #196]	; (8000504 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800043e:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000442:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000446:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800044a:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800044e:	9703      	str	r7, [sp, #12]
 8000450:	9f03      	ldr	r7, [sp, #12]
 8000452:	f023 0703 	bic.w	r7, r3, #3
 8000456:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800045a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800045e:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000462:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000466:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800046a:	f04f 0e0f 	mov.w	lr, #15
 800046e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000472:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000474:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000478:	d039      	beq.n	80004ee <HAL_GPIO_Init+0x18e>
 800047a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800047e:	42a8      	cmp	r0, r5
 8000480:	d037      	beq.n	80004f2 <HAL_GPIO_Init+0x192>
 8000482:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000486:	42a8      	cmp	r0, r5
 8000488:	d035      	beq.n	80004f6 <HAL_GPIO_Init+0x196>
 800048a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800048e:	42a8      	cmp	r0, r5
 8000490:	d033      	beq.n	80004fa <HAL_GPIO_Init+0x19a>
 8000492:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000496:	42a8      	cmp	r0, r5
 8000498:	bf14      	ite	ne
 800049a:	2507      	movne	r5, #7
 800049c:	2504      	moveq	r5, #4
 800049e:	fa05 f50c 	lsl.w	r5, r5, ip
 80004a2:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80004a6:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80004a8:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80004aa:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004ac:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80004b0:	bf0c      	ite	eq
 80004b2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80004b4:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80004b6:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80004b8:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004ba:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80004be:	bf0c      	ite	eq
 80004c0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80004c2:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80004c4:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80004c6:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004c8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80004cc:	bf0c      	ite	eq
 80004ce:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80004d0:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80004d2:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80004d4:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004d6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80004d8:	bf54      	ite	pl
 80004da:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80004dc:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80004de:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80004e0:	3301      	adds	r3, #1
 80004e2:	2b10      	cmp	r3, #16
 80004e4:	f47f af47 	bne.w	8000376 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80004e8:	b005      	add	sp, #20
 80004ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004ee:	465d      	mov	r5, fp
 80004f0:	e7d5      	b.n	800049e <HAL_GPIO_Init+0x13e>
 80004f2:	2501      	movs	r5, #1
 80004f4:	e7d3      	b.n	800049e <HAL_GPIO_Init+0x13e>
 80004f6:	2502      	movs	r5, #2
 80004f8:	e7d1      	b.n	800049e <HAL_GPIO_Init+0x13e>
 80004fa:	2503      	movs	r5, #3
 80004fc:	e7cf      	b.n	800049e <HAL_GPIO_Init+0x13e>
 80004fe:	bf00      	nop
 8000500:	40013c00 	.word	0x40013c00
 8000504:	40020000 	.word	0x40020000
 8000508:	40023800 	.word	0x40023800

0800050c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800050c:	6903      	ldr	r3, [r0, #16]
 800050e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000510:	bf14      	ite	ne
 8000512:	2001      	movne	r0, #1
 8000514:	2000      	moveq	r0, #0
 8000516:	4770      	bx	lr

08000518 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000518:	b10a      	cbz	r2, 800051e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800051a:	6181      	str	r1, [r0, #24]
 800051c:	4770      	bx	lr
 800051e:	0409      	lsls	r1, r1, #16
 8000520:	e7fb      	b.n	800051a <HAL_GPIO_WritePin+0x2>

08000522 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000522:	4770      	bx	lr

08000524 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000524:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000526:	4b04      	ldr	r3, [pc, #16]	; (8000538 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000528:	6959      	ldr	r1, [r3, #20]
 800052a:	4201      	tst	r1, r0
 800052c:	d002      	beq.n	8000534 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800052e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000530:	f7ff fff7 	bl	8000522 <HAL_GPIO_EXTI_Callback>
 8000534:	bd08      	pop	{r3, pc}
 8000536:	bf00      	nop
 8000538:	40013c00 	.word	0x40013c00

0800053c <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800053c:	6803      	ldr	r3, [r0, #0]
{
 800053e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000540:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000542:	07d8      	lsls	r0, r3, #31
 8000544:	d43b      	bmi.n	80005be <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000546:	6823      	ldr	r3, [r4, #0]
 8000548:	0799      	lsls	r1, r3, #30
 800054a:	f100 8086 	bmi.w	800065a <HAL_RCC_OscConfig+0x11e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800054e:	6823      	ldr	r3, [r4, #0]
 8000550:	071e      	lsls	r6, r3, #28
 8000552:	f100 80d1 	bmi.w	80006f8 <HAL_RCC_OscConfig+0x1bc>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000556:	6823      	ldr	r3, [r4, #0]
 8000558:	075d      	lsls	r5, r3, #29
 800055a:	d52a      	bpl.n	80005b2 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	9301      	str	r3, [sp, #4]
 8000560:	4b8e      	ldr	r3, [pc, #568]	; (800079c <HAL_RCC_OscConfig+0x260>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000562:	4d8f      	ldr	r5, [pc, #572]	; (80007a0 <HAL_RCC_OscConfig+0x264>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000566:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800056a:	641a      	str	r2, [r3, #64]	; 0x40
 800056c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000572:	9301      	str	r3, [sp, #4]
 8000574:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8000576:	682b      	ldr	r3, [r5, #0]
 8000578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800057c:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 800057e:	f7ff fe5f 	bl	8000240 <HAL_GetTick>
 8000582:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000584:	682b      	ldr	r3, [r5, #0]
 8000586:	05da      	lsls	r2, r3, #23
 8000588:	f140 80d8 	bpl.w	800073c <HAL_RCC_OscConfig+0x200>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800058c:	68a3      	ldr	r3, [r4, #8]
 800058e:	4d83      	ldr	r5, [pc, #524]	; (800079c <HAL_RCC_OscConfig+0x260>)
 8000590:	2b01      	cmp	r3, #1
 8000592:	f040 80da 	bne.w	800074a <HAL_RCC_OscConfig+0x20e>
 8000596:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800059e:	f7ff fe4f 	bl	8000240 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80005a2:	4d7e      	ldr	r5, [pc, #504]	; (800079c <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 80005a4:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80005a6:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80005aa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80005ac:	079b      	lsls	r3, r3, #30
 80005ae:	f140 80ed 	bpl.w	800078c <HAL_RCC_OscConfig+0x250>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005b2:	69a2      	ldr	r2, [r4, #24]
 80005b4:	2a00      	cmp	r2, #0
 80005b6:	f040 80f9 	bne.w	80007ac <HAL_RCC_OscConfig+0x270>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80005ba:	2000      	movs	r0, #0
 80005bc:	e015      	b.n	80005ea <HAL_RCC_OscConfig+0xae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80005be:	4b77      	ldr	r3, [pc, #476]	; (800079c <HAL_RCC_OscConfig+0x260>)
 80005c0:	689a      	ldr	r2, [r3, #8]
 80005c2:	f002 020c 	and.w	r2, r2, #12
 80005c6:	2a04      	cmp	r2, #4
 80005c8:	d007      	beq.n	80005da <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80005ca:	689a      	ldr	r2, [r3, #8]
 80005cc:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80005d0:	2a08      	cmp	r2, #8
 80005d2:	d10c      	bne.n	80005ee <HAL_RCC_OscConfig+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	025a      	lsls	r2, r3, #9
 80005d8:	d509      	bpl.n	80005ee <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005da:	4b70      	ldr	r3, [pc, #448]	; (800079c <HAL_RCC_OscConfig+0x260>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	039b      	lsls	r3, r3, #14
 80005e0:	d5b1      	bpl.n	8000546 <HAL_RCC_OscConfig+0xa>
 80005e2:	6863      	ldr	r3, [r4, #4]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d1ae      	bne.n	8000546 <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 80005e8:	2001      	movs	r0, #1
}
 80005ea:	b003      	add	sp, #12
 80005ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005ee:	6863      	ldr	r3, [r4, #4]
 80005f0:	4d6a      	ldr	r5, [pc, #424]	; (800079c <HAL_RCC_OscConfig+0x260>)
 80005f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005f6:	d111      	bne.n	800061c <HAL_RCC_OscConfig+0xe0>
 80005f8:	682b      	ldr	r3, [r5, #0]
 80005fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005fe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000600:	f7ff fe1e 	bl	8000240 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000604:	4d65      	ldr	r5, [pc, #404]	; (800079c <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8000606:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000608:	682b      	ldr	r3, [r5, #0]
 800060a:	039f      	lsls	r7, r3, #14
 800060c:	d49b      	bmi.n	8000546 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800060e:	f7ff fe17 	bl	8000240 <HAL_GetTick>
 8000612:	1b80      	subs	r0, r0, r6
 8000614:	2864      	cmp	r0, #100	; 0x64
 8000616:	d9f7      	bls.n	8000608 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8000618:	2003      	movs	r0, #3
 800061a:	e7e6      	b.n	80005ea <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800061c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000620:	d104      	bne.n	800062c <HAL_RCC_OscConfig+0xf0>
 8000622:	682b      	ldr	r3, [r5, #0]
 8000624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000628:	602b      	str	r3, [r5, #0]
 800062a:	e7e5      	b.n	80005f8 <HAL_RCC_OscConfig+0xbc>
 800062c:	682a      	ldr	r2, [r5, #0]
 800062e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000632:	602a      	str	r2, [r5, #0]
 8000634:	682a      	ldr	r2, [r5, #0]
 8000636:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800063a:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1df      	bne.n	8000600 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8000640:	f7ff fdfe 	bl	8000240 <HAL_GetTick>
 8000644:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000646:	682b      	ldr	r3, [r5, #0]
 8000648:	0398      	lsls	r0, r3, #14
 800064a:	f57f af7c 	bpl.w	8000546 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800064e:	f7ff fdf7 	bl	8000240 <HAL_GetTick>
 8000652:	1b80      	subs	r0, r0, r6
 8000654:	2864      	cmp	r0, #100	; 0x64
 8000656:	d9f6      	bls.n	8000646 <HAL_RCC_OscConfig+0x10a>
 8000658:	e7de      	b.n	8000618 <HAL_RCC_OscConfig+0xdc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800065a:	4b50      	ldr	r3, [pc, #320]	; (800079c <HAL_RCC_OscConfig+0x260>)
 800065c:	689a      	ldr	r2, [r3, #8]
 800065e:	f012 0f0c 	tst.w	r2, #12
 8000662:	d007      	beq.n	8000674 <HAL_RCC_OscConfig+0x138>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000664:	689a      	ldr	r2, [r3, #8]
 8000666:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800066a:	2a08      	cmp	r2, #8
 800066c:	d116      	bne.n	800069c <HAL_RCC_OscConfig+0x160>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	0259      	lsls	r1, r3, #9
 8000672:	d413      	bmi.n	800069c <HAL_RCC_OscConfig+0x160>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000674:	4b49      	ldr	r3, [pc, #292]	; (800079c <HAL_RCC_OscConfig+0x260>)
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	0792      	lsls	r2, r2, #30
 800067a:	d502      	bpl.n	8000682 <HAL_RCC_OscConfig+0x146>
 800067c:	68e2      	ldr	r2, [r4, #12]
 800067e:	2a01      	cmp	r2, #1
 8000680:	d1b2      	bne.n	80005e8 <HAL_RCC_OscConfig+0xac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000682:	6818      	ldr	r0, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000684:	22f8      	movs	r2, #248	; 0xf8
 8000686:	fa92 f2a2 	rbit	r2, r2
 800068a:	fab2 f182 	clz	r1, r2
 800068e:	6922      	ldr	r2, [r4, #16]
 8000690:	408a      	lsls	r2, r1
 8000692:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 8000696:	430a      	orrs	r2, r1
 8000698:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800069a:	e758      	b.n	800054e <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800069c:	68e2      	ldr	r2, [r4, #12]
 800069e:	4b41      	ldr	r3, [pc, #260]	; (80007a4 <HAL_RCC_OscConfig+0x268>)
 80006a0:	b1da      	cbz	r2, 80006da <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_ENABLE();
 80006a2:	2201      	movs	r2, #1
 80006a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006a6:	f7ff fdcb 	bl	8000240 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006aa:	4d3c      	ldr	r5, [pc, #240]	; (800079c <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80006ac:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006ae:	682b      	ldr	r3, [r5, #0]
 80006b0:	079b      	lsls	r3, r3, #30
 80006b2:	d50c      	bpl.n	80006ce <HAL_RCC_OscConfig+0x192>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006b4:	6829      	ldr	r1, [r5, #0]
 80006b6:	23f8      	movs	r3, #248	; 0xf8
 80006b8:	fa93 f3a3 	rbit	r3, r3
 80006bc:	fab3 f283 	clz	r2, r3
 80006c0:	6923      	ldr	r3, [r4, #16]
 80006c2:	4093      	lsls	r3, r2
 80006c4:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80006c8:	4313      	orrs	r3, r2
 80006ca:	602b      	str	r3, [r5, #0]
 80006cc:	e73f      	b.n	800054e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006ce:	f7ff fdb7 	bl	8000240 <HAL_GetTick>
 80006d2:	1b80      	subs	r0, r0, r6
 80006d4:	2802      	cmp	r0, #2
 80006d6:	d9ea      	bls.n	80006ae <HAL_RCC_OscConfig+0x172>
 80006d8:	e79e      	b.n	8000618 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 80006da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006dc:	f7ff fdb0 	bl	8000240 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006e0:	4d2e      	ldr	r5, [pc, #184]	; (800079c <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80006e2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006e4:	682b      	ldr	r3, [r5, #0]
 80006e6:	079f      	lsls	r7, r3, #30
 80006e8:	f57f af31 	bpl.w	800054e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006ec:	f7ff fda8 	bl	8000240 <HAL_GetTick>
 80006f0:	1b80      	subs	r0, r0, r6
 80006f2:	2802      	cmp	r0, #2
 80006f4:	d9f6      	bls.n	80006e4 <HAL_RCC_OscConfig+0x1a8>
 80006f6:	e78f      	b.n	8000618 <HAL_RCC_OscConfig+0xdc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80006f8:	6962      	ldr	r2, [r4, #20]
 80006fa:	4b2b      	ldr	r3, [pc, #172]	; (80007a8 <HAL_RCC_OscConfig+0x26c>)
 80006fc:	b17a      	cbz	r2, 800071e <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 80006fe:	2201      	movs	r2, #1
 8000700:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000702:	f7ff fd9d 	bl	8000240 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000706:	4d25      	ldr	r5, [pc, #148]	; (800079c <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8000708:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800070a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800070c:	0798      	lsls	r0, r3, #30
 800070e:	f53f af22 	bmi.w	8000556 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000712:	f7ff fd95 	bl	8000240 <HAL_GetTick>
 8000716:	1b80      	subs	r0, r0, r6
 8000718:	2802      	cmp	r0, #2
 800071a:	d9f6      	bls.n	800070a <HAL_RCC_OscConfig+0x1ce>
 800071c:	e77c      	b.n	8000618 <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_LSI_DISABLE();
 800071e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000720:	f7ff fd8e 	bl	8000240 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000724:	4d1d      	ldr	r5, [pc, #116]	; (800079c <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8000726:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000728:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800072a:	0799      	lsls	r1, r3, #30
 800072c:	f57f af13 	bpl.w	8000556 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000730:	f7ff fd86 	bl	8000240 <HAL_GetTick>
 8000734:	1b80      	subs	r0, r0, r6
 8000736:	2802      	cmp	r0, #2
 8000738:	d9f6      	bls.n	8000728 <HAL_RCC_OscConfig+0x1ec>
 800073a:	e76d      	b.n	8000618 <HAL_RCC_OscConfig+0xdc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800073c:	f7ff fd80 	bl	8000240 <HAL_GetTick>
 8000740:	1b80      	subs	r0, r0, r6
 8000742:	2802      	cmp	r0, #2
 8000744:	f67f af1e 	bls.w	8000584 <HAL_RCC_OscConfig+0x48>
 8000748:	e766      	b.n	8000618 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800074a:	2b05      	cmp	r3, #5
 800074c:	d104      	bne.n	8000758 <HAL_RCC_OscConfig+0x21c>
 800074e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	672b      	str	r3, [r5, #112]	; 0x70
 8000756:	e71e      	b.n	8000596 <HAL_RCC_OscConfig+0x5a>
 8000758:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800075a:	f022 0201 	bic.w	r2, r2, #1
 800075e:	672a      	str	r2, [r5, #112]	; 0x70
 8000760:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000762:	f022 0204 	bic.w	r2, r2, #4
 8000766:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000768:	2b00      	cmp	r3, #0
 800076a:	f47f af18 	bne.w	800059e <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 800076e:	f7ff fd67 	bl	8000240 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000772:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000776:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000778:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800077a:	0798      	lsls	r0, r3, #30
 800077c:	f57f af19 	bpl.w	80005b2 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000780:	f7ff fd5e 	bl	8000240 <HAL_GetTick>
 8000784:	1b80      	subs	r0, r0, r6
 8000786:	42b8      	cmp	r0, r7
 8000788:	d9f6      	bls.n	8000778 <HAL_RCC_OscConfig+0x23c>
 800078a:	e745      	b.n	8000618 <HAL_RCC_OscConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800078c:	f7ff fd58 	bl	8000240 <HAL_GetTick>
 8000790:	1b80      	subs	r0, r0, r6
 8000792:	42b8      	cmp	r0, r7
 8000794:	f67f af09 	bls.w	80005aa <HAL_RCC_OscConfig+0x6e>
 8000798:	e73e      	b.n	8000618 <HAL_RCC_OscConfig+0xdc>
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40007000 	.word	0x40007000
 80007a4:	42470000 	.word	0x42470000
 80007a8:	42470e80 	.word	0x42470e80
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80007ac:	4d2b      	ldr	r5, [pc, #172]	; (800085c <HAL_RCC_OscConfig+0x320>)
 80007ae:	68ab      	ldr	r3, [r5, #8]
 80007b0:	f003 030c 	and.w	r3, r3, #12
 80007b4:	2b08      	cmp	r3, #8
 80007b6:	f43f af17 	beq.w	80005e8 <HAL_RCC_OscConfig+0xac>
 80007ba:	4e29      	ldr	r6, [pc, #164]	; (8000860 <HAL_RCC_OscConfig+0x324>)
 80007bc:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007be:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80007c0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007c2:	d13e      	bne.n	8000842 <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 80007c4:	f7ff fd3c 	bl	8000240 <HAL_GetTick>
 80007c8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80007ca:	682b      	ldr	r3, [r5, #0]
 80007cc:	0199      	lsls	r1, r3, #6
 80007ce:	d432      	bmi.n	8000836 <HAL_RCC_OscConfig+0x2fa>
 80007d0:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 80007d4:	fa97 f7a7 	rbit	r7, r7
 80007d8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80007dc:	fab7 f787 	clz	r7, r7
 80007e0:	fa92 f2a2 	rbit	r2, r2
 80007e4:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80007e8:	fab2 f082 	clz	r0, r2
 80007ec:	fa91 f1a1 	rbit	r1, r1
 80007f0:	6a22      	ldr	r2, [r4, #32]
 80007f2:	69e3      	ldr	r3, [r4, #28]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007f8:	fa02 f707 	lsl.w	r7, r2, r7
 80007fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80007fe:	0852      	lsrs	r2, r2, #1
 8000800:	3a01      	subs	r2, #1
 8000802:	4082      	lsls	r2, r0
 8000804:	433b      	orrs	r3, r7
 8000806:	4313      	orrs	r3, r2
 8000808:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800080a:	4c14      	ldr	r4, [pc, #80]	; (800085c <HAL_RCC_OscConfig+0x320>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800080c:	fab1 f181 	clz	r1, r1
 8000810:	fa02 f101 	lsl.w	r1, r2, r1
 8000814:	430b      	orrs	r3, r1
 8000816:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000818:	2301      	movs	r3, #1
 800081a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800081c:	f7ff fd10 	bl	8000240 <HAL_GetTick>
 8000820:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000822:	6823      	ldr	r3, [r4, #0]
 8000824:	019a      	lsls	r2, r3, #6
 8000826:	f53f aec8 	bmi.w	80005ba <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800082a:	f7ff fd09 	bl	8000240 <HAL_GetTick>
 800082e:	1b40      	subs	r0, r0, r5
 8000830:	2802      	cmp	r0, #2
 8000832:	d9f6      	bls.n	8000822 <HAL_RCC_OscConfig+0x2e6>
 8000834:	e6f0      	b.n	8000618 <HAL_RCC_OscConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000836:	f7ff fd03 	bl	8000240 <HAL_GetTick>
 800083a:	1bc0      	subs	r0, r0, r7
 800083c:	2802      	cmp	r0, #2
 800083e:	d9c4      	bls.n	80007ca <HAL_RCC_OscConfig+0x28e>
 8000840:	e6ea      	b.n	8000618 <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 8000842:	f7ff fcfd 	bl	8000240 <HAL_GetTick>
 8000846:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000848:	682b      	ldr	r3, [r5, #0]
 800084a:	019b      	lsls	r3, r3, #6
 800084c:	f57f aeb5 	bpl.w	80005ba <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000850:	f7ff fcf6 	bl	8000240 <HAL_GetTick>
 8000854:	1b00      	subs	r0, r0, r4
 8000856:	2802      	cmp	r0, #2
 8000858:	d9f6      	bls.n	8000848 <HAL_RCC_OscConfig+0x30c>
 800085a:	e6dd      	b.n	8000618 <HAL_RCC_OscConfig+0xdc>
 800085c:	40023800 	.word	0x40023800
 8000860:	42470060 	.word	0x42470060

08000864 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000864:	4a19      	ldr	r2, [pc, #100]	; (80008cc <HAL_RCC_GetSysClockFreq+0x68>)
 8000866:	6893      	ldr	r3, [r2, #8]
 8000868:	f003 030c 	and.w	r3, r3, #12
 800086c:	2b04      	cmp	r3, #4
{
 800086e:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000870:	d003      	beq.n	800087a <HAL_RCC_GetSysClockFreq+0x16>
 8000872:	2b08      	cmp	r3, #8
 8000874:	d003      	beq.n	800087e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000876:	4816      	ldr	r0, [pc, #88]	; (80008d0 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000878:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 800087a:	4816      	ldr	r0, [pc, #88]	; (80008d4 <HAL_RCC_GetSysClockFreq+0x70>)
 800087c:	bd10      	pop	{r4, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800087e:	6851      	ldr	r1, [r2, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000880:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000882:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000886:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800088a:	f647 74c0 	movw	r4, #32704	; 0x7fc0
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800088e:	6853      	ldr	r3, [r2, #4]
 8000890:	fa94 f0a4 	rbit	r0, r4
 8000894:	fab0 f080 	clz	r0, r0
 8000898:	ea03 0304 	and.w	r3, r3, r4
 800089c:	fa23 f300 	lsr.w	r3, r3, r0
 80008a0:	bf14      	ite	ne
 80008a2:	480c      	ldrne	r0, [pc, #48]	; (80008d4 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80008a4:	480a      	ldreq	r0, [pc, #40]	; (80008d0 <HAL_RCC_GetSysClockFreq+0x6c>)
 80008a6:	fbb0 f0f1 	udiv	r0, r0, r1
 80008aa:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <HAL_RCC_GetSysClockFreq+0x68>)
 80008ae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	fa92 f2a2 	rbit	r2, r2
 80008b8:	fab2 f282 	clz	r2, r2
 80008bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80008c0:	40d3      	lsrs	r3, r2
 80008c2:	3301      	adds	r3, #1
 80008c4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80008c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80008ca:	bd10      	pop	{r4, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	00f42400 	.word	0x00f42400
 80008d4:	017d7840 	.word	0x017d7840

080008d8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008d8:	4b56      	ldr	r3, [pc, #344]	; (8000a34 <HAL_RCC_ClockConfig+0x15c>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	f002 020f 	and.w	r2, r2, #15
 80008e0:	428a      	cmp	r2, r1
{
 80008e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008e6:	4605      	mov	r5, r0
 80008e8:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008ea:	d330      	bcc.n	800094e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80008ec:	682a      	ldr	r2, [r5, #0]
 80008ee:	0794      	lsls	r4, r2, #30
 80008f0:	d437      	bmi.n	8000962 <HAL_RCC_ClockConfig+0x8a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80008f2:	07d0      	lsls	r0, r2, #31
 80008f4:	d43d      	bmi.n	8000972 <HAL_RCC_ClockConfig+0x9a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80008f6:	4b4f      	ldr	r3, [pc, #316]	; (8000a34 <HAL_RCC_ClockConfig+0x15c>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	f002 020f 	and.w	r2, r2, #15
 80008fe:	4296      	cmp	r6, r2
 8000900:	f0c0 8088 	bcc.w	8000a14 <HAL_RCC_ClockConfig+0x13c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000904:	682a      	ldr	r2, [r5, #0]
 8000906:	0751      	lsls	r1, r2, #29
 8000908:	f100 808c 	bmi.w	8000a24 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800090c:	0713      	lsls	r3, r2, #28
 800090e:	d507      	bpl.n	8000920 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000910:	4a49      	ldr	r2, [pc, #292]	; (8000a38 <HAL_RCC_ClockConfig+0x160>)
 8000912:	6929      	ldr	r1, [r5, #16]
 8000914:	6893      	ldr	r3, [r2, #8]
 8000916:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800091a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800091e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000920:	f7ff ffa0 	bl	8000864 <HAL_RCC_GetSysClockFreq>
 8000924:	4b44      	ldr	r3, [pc, #272]	; (8000a38 <HAL_RCC_ClockConfig+0x160>)
 8000926:	22f0      	movs	r2, #240	; 0xf0
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	fa92 f2a2 	rbit	r2, r2
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000936:	40d3      	lsrs	r3, r2
 8000938:	4a40      	ldr	r2, [pc, #256]	; (8000a3c <HAL_RCC_ClockConfig+0x164>)
 800093a:	5cd3      	ldrb	r3, [r2, r3]
 800093c:	40d8      	lsrs	r0, r3
 800093e:	4b40      	ldr	r3, [pc, #256]	; (8000a40 <HAL_RCC_ClockConfig+0x168>)
 8000940:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000942:	2000      	movs	r0, #0
 8000944:	f7ff fc46 	bl	80001d4 <HAL_InitTick>
  return HAL_OK;
 8000948:	2000      	movs	r0, #0
}
 800094a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800094e:	b2ca      	uxtb	r2, r1
 8000950:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f003 030f 	and.w	r3, r3, #15
 8000958:	4299      	cmp	r1, r3
 800095a:	d0c7      	beq.n	80008ec <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800095c:	2001      	movs	r0, #1
 800095e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000962:	4935      	ldr	r1, [pc, #212]	; (8000a38 <HAL_RCC_ClockConfig+0x160>)
 8000964:	68a8      	ldr	r0, [r5, #8]
 8000966:	688b      	ldr	r3, [r1, #8]
 8000968:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800096c:	4303      	orrs	r3, r0
 800096e:	608b      	str	r3, [r1, #8]
 8000970:	e7bf      	b.n	80008f2 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000972:	686a      	ldr	r2, [r5, #4]
 8000974:	4b30      	ldr	r3, [pc, #192]	; (8000a38 <HAL_RCC_ClockConfig+0x160>)
 8000976:	2a01      	cmp	r2, #1
 8000978:	d11e      	bne.n	80009b8 <HAL_RCC_ClockConfig+0xe0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000980:	d0ec      	beq.n	800095c <HAL_RCC_ClockConfig+0x84>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000982:	4c2d      	ldr	r4, [pc, #180]	; (8000a38 <HAL_RCC_ClockConfig+0x160>)
 8000984:	68a3      	ldr	r3, [r4, #8]
 8000986:	f023 0303 	bic.w	r3, r3, #3
 800098a:	4313      	orrs	r3, r2
 800098c:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800098e:	f7ff fc57 	bl	8000240 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000992:	686b      	ldr	r3, [r5, #4]
 8000994:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000996:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000998:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800099c:	d116      	bne.n	80009cc <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800099e:	68a3      	ldr	r3, [r4, #8]
 80009a0:	f003 030c 	and.w	r3, r3, #12
 80009a4:	2b04      	cmp	r3, #4
 80009a6:	d0a6      	beq.n	80008f6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009a8:	f7ff fc4a 	bl	8000240 <HAL_GetTick>
 80009ac:	1bc0      	subs	r0, r0, r7
 80009ae:	4540      	cmp	r0, r8
 80009b0:	d9f5      	bls.n	800099e <HAL_RCC_ClockConfig+0xc6>
          return HAL_TIMEOUT;
 80009b2:	2003      	movs	r0, #3
 80009b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80009b8:	1e91      	subs	r1, r2, #2
 80009ba:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009bc:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80009be:	d802      	bhi.n	80009c6 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009c0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80009c4:	e7dc      	b.n	8000980 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009c6:	f013 0f02 	tst.w	r3, #2
 80009ca:	e7d9      	b.n	8000980 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	d10a      	bne.n	80009e6 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009d0:	68a3      	ldr	r3, [r4, #8]
 80009d2:	f003 030c 	and.w	r3, r3, #12
 80009d6:	2b08      	cmp	r3, #8
 80009d8:	d08d      	beq.n	80008f6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009da:	f7ff fc31 	bl	8000240 <HAL_GetTick>
 80009de:	1bc0      	subs	r0, r0, r7
 80009e0:	4540      	cmp	r0, r8
 80009e2:	d9f5      	bls.n	80009d0 <HAL_RCC_ClockConfig+0xf8>
 80009e4:	e7e5      	b.n	80009b2 <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80009e6:	2b03      	cmp	r3, #3
 80009e8:	d10f      	bne.n	8000a0a <HAL_RCC_ClockConfig+0x132>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80009ea:	68a3      	ldr	r3, [r4, #8]
 80009ec:	f003 030c 	and.w	r3, r3, #12
 80009f0:	2b0c      	cmp	r3, #12
 80009f2:	d080      	beq.n	80008f6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009f4:	f7ff fc24 	bl	8000240 <HAL_GetTick>
 80009f8:	1bc0      	subs	r0, r0, r7
 80009fa:	4540      	cmp	r0, r8
 80009fc:	d9f5      	bls.n	80009ea <HAL_RCC_ClockConfig+0x112>
 80009fe:	e7d8      	b.n	80009b2 <HAL_RCC_ClockConfig+0xda>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a00:	f7ff fc1e 	bl	8000240 <HAL_GetTick>
 8000a04:	1bc0      	subs	r0, r0, r7
 8000a06:	4540      	cmp	r0, r8
 8000a08:	d8d3      	bhi.n	80009b2 <HAL_RCC_ClockConfig+0xda>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a0a:	68a3      	ldr	r3, [r4, #8]
 8000a0c:	f013 0f0c 	tst.w	r3, #12
 8000a10:	d1f6      	bne.n	8000a00 <HAL_RCC_ClockConfig+0x128>
 8000a12:	e770      	b.n	80008f6 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a14:	b2f2      	uxtb	r2, r6
 8000a16:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	429e      	cmp	r6, r3
 8000a20:	d19c      	bne.n	800095c <HAL_RCC_ClockConfig+0x84>
 8000a22:	e76f      	b.n	8000904 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a24:	4904      	ldr	r1, [pc, #16]	; (8000a38 <HAL_RCC_ClockConfig+0x160>)
 8000a26:	68e8      	ldr	r0, [r5, #12]
 8000a28:	688b      	ldr	r3, [r1, #8]
 8000a2a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000a2e:	4303      	orrs	r3, r0
 8000a30:	608b      	str	r3, [r1, #8]
 8000a32:	e76b      	b.n	800090c <HAL_RCC_ClockConfig+0x34>
 8000a34:	40023c00 	.word	0x40023c00
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	08001188 	.word	0x08001188
 8000a40:	20000004 	.word	0x20000004

08000a44 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000a44:	4b01      	ldr	r3, [pc, #4]	; (8000a4c <HAL_RCC_GetHCLKFreq+0x8>)
 8000a46:	6818      	ldr	r0, [r3, #0]
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000004 	.word	0x20000004

08000a50 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000a50:	6a03      	ldr	r3, [r0, #32]
 8000a52:	f023 0301 	bic.w	r3, r3, #1
 8000a56:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000a58:	6a03      	ldr	r3, [r0, #32]
{
 8000a5a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000a5c:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000a5e:	6982      	ldr	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000a60:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000a62:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000a66:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000a68:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000a6a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000a6e:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000a70:	4d0a      	ldr	r5, [pc, #40]	; (8000a9c <TIM_OC1_SetConfig+0x4c>)
 8000a72:	42a8      	cmp	r0, r5
 8000a74:	d10b      	bne.n	8000a8e <TIM_OC1_SetConfig+0x3e>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000a76:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000a78:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000a7a:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000a7e:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8000a80:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000a82:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8000a86:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8000a88:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000a8c:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000a8e:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000a90:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000a92:	684a      	ldr	r2, [r1, #4]
 8000a94:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8000a96:	6203      	str	r3, [r0, #32]
 8000a98:	bd70      	pop	{r4, r5, r6, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40010000 	.word	0x40010000

08000aa0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000aa0:	6a03      	ldr	r3, [r0, #32]
 8000aa2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000aa6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000aa8:	6a03      	ldr	r3, [r0, #32]
{
 8000aaa:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000aac:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000aae:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000ab0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8000ab2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000ab6:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000ab8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000aba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000abe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000ac2:	4d0b      	ldr	r5, [pc, #44]	; (8000af0 <TIM_OC3_SetConfig+0x50>)
 8000ac4:	42a8      	cmp	r0, r5
 8000ac6:	d10d      	bne.n	8000ae4 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000ac8:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000aca:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000acc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000ad0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000ad4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000ad6:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000ada:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8000adc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000ae0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000ae4:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000ae6:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000ae8:	684a      	ldr	r2, [r1, #4]
 8000aea:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000aec:	6203      	str	r3, [r0, #32]
 8000aee:	bd70      	pop	{r4, r5, r6, pc}
 8000af0:	40010000 	.word	0x40010000

08000af4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000af4:	6a03      	ldr	r3, [r0, #32]
 8000af6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000afa:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000afc:	6a03      	ldr	r3, [r0, #32]
{
 8000afe:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000b00:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000b02:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000b04:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000b06:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000b0a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000b0e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000b10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000b14:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000b18:	4d06      	ldr	r5, [pc, #24]	; (8000b34 <TIM_OC4_SetConfig+0x40>)
 8000b1a:	42a8      	cmp	r0, r5
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000b1c:	bf02      	ittt	eq
 8000b1e:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000b20:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000b24:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000b28:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8000b2a:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000b2c:	684a      	ldr	r2, [r1, #4]
 8000b2e:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000b30:	6203      	str	r3, [r0, #32]
 8000b32:	bd30      	pop	{r4, r5, pc}
 8000b34:	40010000 	.word	0x40010000

08000b38 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000b38:	4a22      	ldr	r2, [pc, #136]	; (8000bc4 <TIM_Base_SetConfig+0x8c>)
  tmpcr1 = TIMx->CR1;
 8000b3a:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000b3c:	4290      	cmp	r0, r2
 8000b3e:	d00e      	beq.n	8000b5e <TIM_Base_SetConfig+0x26>
 8000b40:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000b44:	d00b      	beq.n	8000b5e <TIM_Base_SetConfig+0x26>
 8000b46:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	d007      	beq.n	8000b5e <TIM_Base_SetConfig+0x26>
 8000b4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b52:	4290      	cmp	r0, r2
 8000b54:	d003      	beq.n	8000b5e <TIM_Base_SetConfig+0x26>
 8000b56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b5a:	4290      	cmp	r0, r2
 8000b5c:	d119      	bne.n	8000b92 <TIM_Base_SetConfig+0x5a>
    tmpcr1 |= Structure->CounterMode;
 8000b5e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000b64:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000b66:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <TIM_Base_SetConfig+0x8c>)
 8000b68:	4290      	cmp	r0, r2
 8000b6a:	d104      	bne.n	8000b76 <TIM_Base_SetConfig+0x3e>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000b6c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000b72:	4313      	orrs	r3, r2
 8000b74:	e018      	b.n	8000ba8 <TIM_Base_SetConfig+0x70>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000b76:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000b7a:	d0f7      	beq.n	8000b6c <TIM_Base_SetConfig+0x34>
 8000b7c:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <TIM_Base_SetConfig+0x90>)
 8000b7e:	4290      	cmp	r0, r2
 8000b80:	d0f4      	beq.n	8000b6c <TIM_Base_SetConfig+0x34>
 8000b82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b86:	4290      	cmp	r0, r2
 8000b88:	d0f0      	beq.n	8000b6c <TIM_Base_SetConfig+0x34>
 8000b8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b8e:	4290      	cmp	r0, r2
 8000b90:	d0ec      	beq.n	8000b6c <TIM_Base_SetConfig+0x34>
 8000b92:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <TIM_Base_SetConfig+0x94>)
 8000b94:	4290      	cmp	r0, r2
 8000b96:	d0e9      	beq.n	8000b6c <TIM_Base_SetConfig+0x34>
 8000b98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b9c:	4290      	cmp	r0, r2
 8000b9e:	d0e5      	beq.n	8000b6c <TIM_Base_SetConfig+0x34>
 8000ba0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ba4:	4290      	cmp	r0, r2
 8000ba6:	d0e1      	beq.n	8000b6c <TIM_Base_SetConfig+0x34>
  TIMx->CR1 = tmpcr1;
 8000ba8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000baa:	688b      	ldr	r3, [r1, #8]
 8000bac:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000bae:	680b      	ldr	r3, [r1, #0]
 8000bb0:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8000bb2:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <TIM_Base_SetConfig+0x8c>)
 8000bb4:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8000bb6:	bf04      	itt	eq
 8000bb8:	690b      	ldreq	r3, [r1, #16]
 8000bba:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	6143      	str	r3, [r0, #20]
}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40010000 	.word	0x40010000
 8000bc8:	40000400 	.word	0x40000400
 8000bcc:	40014000 	.word	0x40014000

08000bd0 <HAL_TIM_PWM_Init>:
{
 8000bd0:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	b1a0      	cbz	r0, 8000c00 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000bd6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000bda:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000bde:	b91b      	cbnz	r3, 8000be8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000be0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8000be4:	f000 f9dc 	bl	8000fa0 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8000be8:	2302      	movs	r3, #2
 8000bea:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000bee:	6820      	ldr	r0, [r4, #0]
 8000bf0:	1d21      	adds	r1, r4, #4
 8000bf2:	f7ff ffa1 	bl	8000b38 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c00:	2001      	movs	r0, #1
}  
 8000c02:	bd10      	pop	{r4, pc}

08000c04 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000c04:	6a03      	ldr	r3, [r0, #32]
 8000c06:	f023 0310 	bic.w	r3, r3, #16
 8000c0a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8000c0c:	6a03      	ldr	r3, [r0, #32]
{
 8000c0e:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 = TIMx->CR2;
 8000c10:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8000c12:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000c14:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000c16:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000c1a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000c1e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8000c20:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000c24:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000c28:	4d0b      	ldr	r5, [pc, #44]	; (8000c58 <TIM_OC2_SetConfig+0x54>)
 8000c2a:	42a8      	cmp	r0, r5
 8000c2c:	d10d      	bne.n	8000c4a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000c2e:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8000c30:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8000c32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000c36:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8000c3a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8000c3c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8000c40:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8000c42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8000c46:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8000c4a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000c4c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8000c4e:	684a      	ldr	r2, [r1, #4]
 8000c50:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8000c52:	6203      	str	r3, [r0, #32]
 8000c54:	bd70      	pop	{r4, r5, r6, pc}
 8000c56:	bf00      	nop
 8000c58:	40010000 	.word	0x40010000

08000c5c <HAL_TIM_PWM_ConfigChannel>:
{
 8000c5c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8000c5e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000c62:	2b01      	cmp	r3, #1
{
 8000c64:	4604      	mov	r4, r0
 8000c66:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8000c6a:	d025      	beq.n	8000cb8 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8000c72:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 8000c76:	2a0c      	cmp	r2, #12
 8000c78:	d818      	bhi.n	8000cac <HAL_TIM_PWM_ConfigChannel+0x50>
 8000c7a:	e8df f002 	tbb	[pc, r2]
 8000c7e:	1707      	.short	0x1707
 8000c80:	171e1717 	.word	0x171e1717
 8000c84:	172f1717 	.word	0x172f1717
 8000c88:	1717      	.short	0x1717
 8000c8a:	40          	.byte	0x40
 8000c8b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8000c8c:	6820      	ldr	r0, [r4, #0]
 8000c8e:	f7ff fedf 	bl	8000a50 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000c92:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000c94:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000c96:	699a      	ldr	r2, [r3, #24]
 8000c98:	f042 0208 	orr.w	r2, r2, #8
 8000c9c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8000c9e:	699a      	ldr	r2, [r3, #24]
 8000ca0:	f022 0204 	bic.w	r2, r2, #4
 8000ca4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000ca6:	699a      	ldr	r2, [r3, #24]
 8000ca8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8000caa:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8000cac:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000cae:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000cb0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8000cb4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8000cb8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8000cba:	6820      	ldr	r0, [r4, #0]
 8000cbc:	f7ff ffa2 	bl	8000c04 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000cc0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8000cc2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000cc4:	699a      	ldr	r2, [r3, #24]
 8000cc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8000ccc:	699a      	ldr	r2, [r3, #24]
 8000cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8000cd4:	699a      	ldr	r2, [r3, #24]
 8000cd6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000cda:	e7e6      	b.n	8000caa <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8000cdc:	6820      	ldr	r0, [r4, #0]
 8000cde:	f7ff fedf 	bl	8000aa0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000ce2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8000ce4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000ce6:	69da      	ldr	r2, [r3, #28]
 8000ce8:	f042 0208 	orr.w	r2, r2, #8
 8000cec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8000cee:	69da      	ldr	r2, [r3, #28]
 8000cf0:	f022 0204 	bic.w	r2, r2, #4
 8000cf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8000cf6:	69da      	ldr	r2, [r3, #28]
 8000cf8:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8000cfa:	61da      	str	r2, [r3, #28]
    break;
 8000cfc:	e7d6      	b.n	8000cac <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8000cfe:	6820      	ldr	r0, [r4, #0]
 8000d00:	f7ff fef8 	bl	8000af4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000d04:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8000d06:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000d08:	69da      	ldr	r2, [r3, #28]
 8000d0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8000d10:	69da      	ldr	r2, [r3, #28]
 8000d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d16:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8000d18:	69da      	ldr	r2, [r3, #28]
 8000d1a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d1e:	e7ec      	b.n	8000cfa <HAL_TIM_PWM_ConfigChannel+0x9e>

08000d20 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8000d20:	6a03      	ldr	r3, [r0, #32]
{
 8000d22:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8000d24:	2401      	movs	r4, #1
 8000d26:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8000d28:	ea23 0304 	bic.w	r3, r3, r4
 8000d2c:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8000d2e:	6a03      	ldr	r3, [r0, #32]
 8000d30:	408a      	lsls	r2, r1
 8000d32:	431a      	orrs	r2, r3
 8000d34:	6202      	str	r2, [r0, #32]
 8000d36:	bd10      	pop	{r4, pc}

08000d38 <HAL_TIM_PWM_Start>:
{
 8000d38:	b510      	push	{r4, lr}
 8000d3a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	6800      	ldr	r0, [r0, #0]
 8000d40:	f7ff ffee 	bl	8000d20 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8000d44:	6823      	ldr	r3, [r4, #0]
 8000d46:	4a06      	ldr	r2, [pc, #24]	; (8000d60 <HAL_TIM_PWM_Start+0x28>)
 8000d48:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8000d4a:	bf02      	ittt	eq
 8000d4c:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8000d4e:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8000d52:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	f042 0201 	orr.w	r2, r2, #1
 8000d5a:	601a      	str	r2, [r3, #0]
} 
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	bd10      	pop	{r4, pc}
 8000d60:	40010000 	.word	0x40010000

08000d64 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8000d64:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000d68:	2b01      	cmp	r3, #1
{
 8000d6a:	b510      	push	{r4, lr}
 8000d6c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8000d70:	d018      	beq.n	8000da4 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8000d72:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000d76:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8000d78:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000d7a:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000d7c:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000d7e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000d82:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	4322      	orrs	r2, r4
 8000d88:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d90:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	430a      	orrs	r2, r1
 8000d96:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000da4:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8000da6:	bd10      	pop	{r4, pc}

08000da8 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000da8:	b510      	push	{r4, lr}
 8000daa:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dac:	2200      	movs	r2, #0
 8000dae:	4b22      	ldr	r3, [pc, #136]	; (8000e38 <SystemClock_Config+0x90>)
 8000db0:	9201      	str	r2, [sp, #4]
 8000db2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000db4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000db8:	6419      	str	r1, [r3, #64]	; 0x40
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dbc:	491f      	ldr	r1, [pc, #124]	; (8000e3c <SystemClock_Config+0x94>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	9301      	str	r3, [sp, #4]
 8000dc4:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dc6:	9202      	str	r2, [sp, #8]
 8000dc8:	680b      	ldr	r3, [r1, #0]
 8000dca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dd2:	600b      	str	r3, [r1, #0]
 8000dd4:	680b      	ldr	r3, [r1, #0]
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dd6:	920e      	str	r2, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ddc:	9302      	str	r3, [sp, #8]
 8000dde:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de0:	2302      	movs	r3, #2
 8000de2:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de4:	2301      	movs	r3, #1
 8000de6:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de8:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000dea:	2310      	movs	r3, #16
 8000dec:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dee:	f7ff fba5 	bl	800053c <HAL_RCC_OscConfig>
 8000df2:	4601      	mov	r1, r0
 8000df4:	b100      	cbz	r0, 8000df8 <SystemClock_Config+0x50>
 8000df6:	e7fe      	b.n	8000df6 <SystemClock_Config+0x4e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df8:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dfa:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfc:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dfe:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e00:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e02:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e04:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e06:	f7ff fd67 	bl	80008d8 <HAL_RCC_ClockConfig>
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	b100      	cbz	r0, 8000e10 <SystemClock_Config+0x68>
 8000e0e:	e7fe      	b.n	8000e0e <SystemClock_Config+0x66>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000e10:	f7ff fe18 	bl	8000a44 <HAL_RCC_GetHCLKFreq>
 8000e14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e18:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e1c:	f7ff fa78 	bl	8000310 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000e20:	2004      	movs	r0, #4
 8000e22:	f7ff fa8b 	bl	800033c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000e26:	4622      	mov	r2, r4
 8000e28:	4621      	mov	r1, r4
 8000e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2e:	f7ff fa2f 	bl	8000290 <HAL_NVIC_SetPriority>
}
 8000e32:	b014      	add	sp, #80	; 0x50
 8000e34:	bd10      	pop	{r4, pc}
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40007000 	.word	0x40007000

08000e40 <main>:
{
 8000e40:	b500      	push	{lr}
 8000e42:	b08d      	sub	sp, #52	; 0x34
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e44:	2500      	movs	r5, #0
  HAL_Init();
 8000e46:	f7ff f9d9 	bl	80001fc <HAL_Init>
  SystemClock_Config();
 8000e4a:	f7ff ffad 	bl	8000da8 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	4b35      	ldr	r3, [pc, #212]	; (8000f24 <main+0xe4>)
 8000e50:	9501      	str	r5, [sp, #4]
 8000e52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e54:	4834      	ldr	r0, [pc, #208]	; (8000f28 <main+0xe8>)
  htim4.Instance = TIM4;
 8000e56:	4e35      	ldr	r6, [pc, #212]	; (8000f2c <main+0xec>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e58:	f042 0201 	orr.w	r2, r2, #1
 8000e5c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e60:	f002 0201 	and.w	r2, r2, #1
 8000e64:	9201      	str	r2, [sp, #4]
 8000e66:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e68:	9502      	str	r5, [sp, #8]
 8000e6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e6c:	f042 0208 	orr.w	r2, r2, #8
 8000e70:	631a      	str	r2, [r3, #48]	; 0x30
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e78:	462a      	mov	r2, r5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7a:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e80:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e82:	f7ff fb49 	bl	8000518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e86:	4b2a      	ldr	r3, [pc, #168]	; (8000f30 <main+0xf0>)
 8000e88:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e8a:	2401      	movs	r4, #1
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e8c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	a905      	add	r1, sp, #20
 8000e90:	4828      	ldr	r0, [pc, #160]	; (8000f34 <main+0xf4>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e92:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e94:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f7ff fa63 	bl	8000360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000e9a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9e:	a905      	add	r1, sp, #20
 8000ea0:	4821      	ldr	r0, [pc, #132]	; (8000f28 <main+0xe8>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000ea2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eaa:	f7ff fa59 	bl	8000360 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 4, 0);
 8000eae:	462a      	mov	r2, r5
 8000eb0:	2104      	movs	r1, #4
 8000eb2:	2006      	movs	r0, #6
  htim4.Instance = TIM4;
 8000eb4:	4c20      	ldr	r4, [pc, #128]	; (8000f38 <main+0xf8>)
  HAL_NVIC_SetPriority(EXTI0_IRQn, 4, 0);
 8000eb6:	f7ff f9eb 	bl	8000290 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000eba:	2006      	movs	r0, #6
 8000ebc:	f7ff fa1c 	bl	80002f8 <HAL_NVIC_EnableIRQ>
  htim4.Init.Prescaler =2*159;
 8000ec0:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8000ec4:	6063      	str	r3, [r4, #4]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ec6:	4620      	mov	r0, r4
  htim4.Init.Period = 999;
 8000ec8:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim4.Instance = TIM4;
 8000ecc:	6026      	str	r6, [r4, #0]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ece:	60a5      	str	r5, [r4, #8]
  htim4.Init.Period = 999;
 8000ed0:	60e3      	str	r3, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed2:	6125      	str	r5, [r4, #16]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ed4:	f7ff fe7c 	bl	8000bd0 <HAL_TIM_PWM_Init>
 8000ed8:	b100      	cbz	r0, 8000edc <main+0x9c>
 8000eda:	e7fe      	b.n	8000eda <main+0x9a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000edc:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ede:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ee0:	a903      	add	r1, sp, #12
 8000ee2:	4620      	mov	r0, r4
 8000ee4:	f7ff ff3e 	bl	8000d64 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee8:	b100      	cbz	r0, 8000eec <main+0xac>
 8000eea:	e7fe      	b.n	8000eea <main+0xaa>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eec:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8000eee:	9006      	str	r0, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ef0:	9007      	str	r0, [sp, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef2:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ef4:	220c      	movs	r2, #12
 8000ef6:	a905      	add	r1, sp, #20
 8000ef8:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000efa:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000efc:	f7ff feae 	bl	8000c5c <HAL_TIM_PWM_ConfigChannel>
 8000f00:	b100      	cbz	r0, 8000f04 <main+0xc4>
 8000f02:	e7fe      	b.n	8000f02 <main+0xc2>
  HAL_TIM_MspPostInit(&htim4);
 8000f04:	4620      	mov	r0, r4
 8000f06:	f000 f863 	bl	8000fd0 <HAL_TIM_MspPostInit>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 8000f0a:	210c      	movs	r1, #12
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	f7ff ff13 	bl	8000d38 <HAL_TIM_PWM_Start>
TIM4->CCR4=a;
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <main+0xfc>)
 8000f14:	edd3 7a00 	vldr	s15, [r3]
 8000f18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f1c:	edc6 7a10 	vstr	s15, [r6, #64]	; 0x40
 8000f20:	e7fe      	b.n	8000f20 <main+0xe0>
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020c00 	.word	0x40020c00
 8000f2c:	40000800 	.word	0x40000800
 8000f30:	10310000 	.word	0x10310000
 8000f34:	40020000 	.word	0x40020000
 8000f38:	20000028 	.word	0x20000028
 8000f3c:	20000000 	.word	0x20000000

08000f40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f42:	2003      	movs	r0, #3
 8000f44:	f7ff f992 	bl	800026c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	f06f 000b 	mvn.w	r0, #11
 8000f50:	f7ff f99e 	bl	8000290 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000f54:	2200      	movs	r2, #0
 8000f56:	4611      	mov	r1, r2
 8000f58:	f06f 000a 	mvn.w	r0, #10
 8000f5c:	f7ff f998 	bl	8000290 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	4611      	mov	r1, r2
 8000f64:	f06f 0009 	mvn.w	r0, #9
 8000f68:	f7ff f992 	bl	8000290 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4611      	mov	r1, r2
 8000f70:	f06f 0004 	mvn.w	r0, #4
 8000f74:	f7ff f98c 	bl	8000290 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	f06f 0003 	mvn.w	r0, #3
 8000f80:	f7ff f986 	bl	8000290 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	4611      	mov	r1, r2
 8000f88:	f06f 0001 	mvn.w	r0, #1
 8000f8c:	f7ff f980 	bl	8000290 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	4611      	mov	r1, r2
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000f9c:	f7ff b978 	b.w	8000290 <HAL_NVIC_SetPriority>

08000fa0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM4)
 8000fa0:	6802      	ldr	r2, [r0, #0]
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <HAL_TIM_PWM_MspInit+0x28>)
 8000fa4:	429a      	cmp	r2, r3
{
 8000fa6:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM4)
 8000fa8:	d10b      	bne.n	8000fc2 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <HAL_TIM_PWM_MspInit+0x2c>)
 8000fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fb2:	f042 0204 	orr.w	r2, r2, #4
 8000fb6:	641a      	str	r2, [r3, #64]	; 0x40
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	9301      	str	r3, [sp, #4]
 8000fc0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000fc2:	b002      	add	sp, #8
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40000800 	.word	0x40000800
 8000fcc:	40023800 	.word	0x40023800

08000fd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM4)
 8000fd2:	6802      	ldr	r2, [r0, #0]
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <HAL_TIM_MspPostInit+0x2c>)
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d10c      	bne.n	8000ff4 <HAL_TIM_MspPostInit+0x24>
  /* USER CODE END TIM4_MspPostInit 0 */
  
    /**TIM4 GPIO Configuration    
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000fe0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe6:	4806      	ldr	r0, [pc, #24]	; (8001000 <HAL_TIM_MspPostInit+0x30>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000fee:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff0:	f7ff f9b6 	bl	8000360 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000ff4:	b007      	add	sp, #28
 8000ff6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ffa:	bf00      	nop
 8000ffc:	40000800 	.word	0x40000800
 8001000:	40020c00 	.word	0x40020c00

08001004 <NMI_Handler>:
 8001004:	4770      	bx	lr

08001006 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001006:	e7fe      	b.n	8001006 <HardFault_Handler>

08001008 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001008:	e7fe      	b.n	8001008 <MemManage_Handler>

0800100a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800100a:	e7fe      	b.n	800100a <BusFault_Handler>

0800100c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800100c:	e7fe      	b.n	800100c <UsageFault_Handler>

0800100e <SVC_Handler>:
 800100e:	4770      	bx	lr

08001010 <DebugMon_Handler>:
 8001010:	4770      	bx	lr

08001012 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001012:	4770      	bx	lr

08001014 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001014:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001016:	f7ff f90b 	bl	8000230 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800101a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800101e:	f7ff b99a 	b.w	8000356 <HAL_SYSTICK_IRQHandler>
	...

08001024 <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 8001024:	b510      	push	{r4, lr}

  /* USER CODE BEGIN EXTI0_IRQn 0 */

 if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)!=0)
 8001026:	2101      	movs	r1, #1
 8001028:	4815      	ldr	r0, [pc, #84]	; (8001080 <EXTI0_IRQHandler+0x5c>)
 800102a:	f7ff fa6f 	bl	800050c <HAL_GPIO_ReadPin>
 800102e:	4604      	mov	r4, r0
 8001030:	b1b0      	cbz	r0, 8001060 <EXTI0_IRQHandler+0x3c>
 {
	HAL_Delay(0);
 8001032:	2000      	movs	r0, #0
 8001034:	f7ff f90a 	bl	800024c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800103e:	4811      	ldr	r0, [pc, #68]	; (8001084 <EXTI0_IRQHandler+0x60>)
 8001040:	f7ff fa6a 	bl	8000518 <HAL_GPIO_WritePin>
	HAL_Delay(7);
 8001044:	2007      	movs	r0, #7
 8001046:	f7ff f901 	bl	800024c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 else
 {
	HAL_Delay(0);
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_SET);
	HAL_Delay(7);
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_RESET);
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <EXTI0_IRQHandler+0x60>)
 8001052:	f7ff fa61 	bl	8000518 <HAL_GPIO_WritePin>
 }

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001056:	2001      	movs	r0, #1
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800105c:	f7ff ba62 	b.w	8000524 <HAL_GPIO_EXTI_IRQHandler>
	HAL_Delay(0);
 8001060:	f7ff f8f4 	bl	800024c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800106a:	4806      	ldr	r0, [pc, #24]	; (8001084 <EXTI0_IRQHandler+0x60>)
 800106c:	f7ff fa54 	bl	8000518 <HAL_GPIO_WritePin>
	HAL_Delay(7);
 8001070:	2007      	movs	r0, #7
 8001072:	f7ff f8eb 	bl	800024c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_RESET);
 8001076:	4622      	mov	r2, r4
 8001078:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800107c:	e7e8      	b.n	8001050 <EXTI0_IRQHandler+0x2c>
 800107e:	bf00      	nop
 8001080:	40020000 	.word	0x40020000
 8001084:	40020c00 	.word	0x40020c00

08001088 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001088:	490f      	ldr	r1, [pc, #60]	; (80010c8 <SystemInit+0x40>)
 800108a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800108e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <SystemInit+0x44>)
 8001098:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800109a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800109c:	f042 0201 	orr.w	r2, r2, #1
 80010a0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80010a2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80010aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010ae:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80010b0:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <SystemInit+0x48>)
 80010b2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010ba:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80010bc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80010c2:	608b      	str	r3, [r1, #8]
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00
 80010cc:	40023800 	.word	0x40023800
 80010d0:	24003010 	.word	0x24003010

080010d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800110c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010da:	e003      	b.n	80010e4 <LoopCopyDataInit>

080010dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010e2:	3104      	adds	r1, #4

080010e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010e4:	480b      	ldr	r0, [pc, #44]	; (8001114 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010ec:	d3f6      	bcc.n	80010dc <CopyDataInit>
  ldr  r2, =_sbss
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010f0:	e002      	b.n	80010f8 <LoopFillZerobss>

080010f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010f4:	f842 3b04 	str.w	r3, [r2], #4

080010f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010fc:	d3f9      	bcc.n	80010f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010fe:	f7ff ffc3 	bl	8001088 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001102:	f000 f811 	bl	8001128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001106:	f7ff fe9b 	bl	8000e40 <main>
  bx  lr    
 800110a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800110c:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8001110:	080011a0 	.word	0x080011a0
  ldr  r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001118:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 800111c:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8001120:	20000064 	.word	0x20000064

08001124 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC_IRQHandler>
	...

08001128 <__libc_init_array>:
 8001128:	b570      	push	{r4, r5, r6, lr}
 800112a:	4e0d      	ldr	r6, [pc, #52]	; (8001160 <__libc_init_array+0x38>)
 800112c:	4c0d      	ldr	r4, [pc, #52]	; (8001164 <__libc_init_array+0x3c>)
 800112e:	1ba4      	subs	r4, r4, r6
 8001130:	10a4      	asrs	r4, r4, #2
 8001132:	2500      	movs	r5, #0
 8001134:	42a5      	cmp	r5, r4
 8001136:	d109      	bne.n	800114c <__libc_init_array+0x24>
 8001138:	4e0b      	ldr	r6, [pc, #44]	; (8001168 <__libc_init_array+0x40>)
 800113a:	4c0c      	ldr	r4, [pc, #48]	; (800116c <__libc_init_array+0x44>)
 800113c:	f000 f818 	bl	8001170 <_init>
 8001140:	1ba4      	subs	r4, r4, r6
 8001142:	10a4      	asrs	r4, r4, #2
 8001144:	2500      	movs	r5, #0
 8001146:	42a5      	cmp	r5, r4
 8001148:	d105      	bne.n	8001156 <__libc_init_array+0x2e>
 800114a:	bd70      	pop	{r4, r5, r6, pc}
 800114c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001150:	4798      	blx	r3
 8001152:	3501      	adds	r5, #1
 8001154:	e7ee      	b.n	8001134 <__libc_init_array+0xc>
 8001156:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800115a:	4798      	blx	r3
 800115c:	3501      	adds	r5, #1
 800115e:	e7f2      	b.n	8001146 <__libc_init_array+0x1e>
 8001160:	08001198 	.word	0x08001198
 8001164:	08001198 	.word	0x08001198
 8001168:	08001198 	.word	0x08001198
 800116c:	0800119c 	.word	0x0800119c

08001170 <_init>:
 8001170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001172:	bf00      	nop
 8001174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001176:	bc08      	pop	{r3}
 8001178:	469e      	mov	lr, r3
 800117a:	4770      	bx	lr

0800117c <_fini>:
 800117c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800117e:	bf00      	nop
 8001180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001182:	bc08      	pop	{r3}
 8001184:	469e      	mov	lr, r3
 8001186:	4770      	bx	lr
